# Import Libraries
import pygame
import random
import copy
# setup global settings
pygame.init()
size = (600, 600)
screen = pygame.display.set_mode(size)
WHITE = (255, 255, 255)

class Card:

    SUITS = ('Clubs', 'Diamonds', 'Hearts', 'Spades')
    VALS = ('narf', 'Ace', '2', '3', '4', '5', '6', '7',
            '8', '9', '10', 'Jack', 'Queen', 'King')

    # Load Images - all in resources - borrowed from Open source, not remembered where now.
    icon = pygame.image.load('resources/icon.png')
    cBack = pygame.image.load('resources/cards/cardback.png')
    diamondA = pygame.image.load('resources/cards/ad.png')
    clubA = pygame.image.load('resources/cards/ac.png')
    heartA = pygame.image.load('resources/cards/ah.png')
    spadeA = pygame.image.load('resources/cards/as.png')
    diamond2 = pygame.image.load('resources/cards/2d.png')
    club2 = pygame.image.load('resources/cards/2c.png')
    heart2 = pygame.image.load('resources/cards/2h.png')
    spade2 = pygame.image.load('resources/cards/2s.png')
    diamond3 = pygame.image.load('resources/cards/3d.png')
    club3 = pygame.image.load('resources/cards/3c.png')
    heart3 = pygame.image.load('resources/cards/3h.png')
    spade3 = pygame.image.load('resources/cards/3s.png')
    diamond4 = pygame.image.load('resources/cards/4d.png')
    club4 = pygame.image.load('resources/cards/4c.png')
    heart4 = pygame.image.load('resources/cards/4h.png')
    spade4 = pygame.image.load('resources/cards/4s.png')
    diamond5 = pygame.image.load('resources/cards/5d.png')
    club5 = pygame.image.load('resources/cards/5c.png')
    heart5 = pygame.image.load('resources/cards/5h.png')
    spade5 = pygame.image.load('resources/cards/5s.png')
    diamond6 = pygame.image.load('resources/cards/6d.png')
    club6 = pygame.image.load('resources/cards/6c.png')
    heart6 = pygame.image.load('resources/cards/6h.png')
    spade6 = pygame.image.load('resources/cards/6s.png')
    diamond7 = pygame.image.load('resources/cards/7d.png')
    club7 = pygame.image.load('resources/cards/7c.png')
    heart7 = pygame.image.load('resources/cards/7h.png')
    spade7 = pygame.image.load('resources/cards/7s.png')
    diamond8 = pygame.image.load('resources/cards/8d.png')
    club8 = pygame.image.load('resources/cards/8c.png')
    heart8 = pygame.image.load('resources/cards/8h.png')
    spade8 = pygame.image.load('resources/cards/8s.png')
    diamond9 = pygame.image.load('resources/cards/9d.png')
    club9 = pygame.image.load('resources/cards/9c.png')
    heart9 = pygame.image.load('resources/cards/9h.png')
    spade9 = pygame.image.load('resources/cards/9s.png')
    diamond10 = pygame.image.load('resources/cards/10d.png')
    club10 = pygame.image.load('resources/cards/10c.png')
    heart10 = pygame.image.load('resources/cards/10h.png')
    spade10 = pygame.image.load('resources/cards/10s.png')
    diamondJ = pygame.image.load('resources/cards/jd.png')
    clubJ = pygame.image.load('resources/cards/jc.png')
    heartJ = pygame.image.load('resources/cards/jh.png')
    spadeJ = pygame.image.load('resources/cards/js.png')
    diamondQ = pygame.image.load('resources/cards/qd.png')
    clubQ = pygame.image.load('resources/cards/qc.png')
    heartQ = pygame.image.load('resources/cards/qh.png')
    spadeQ = pygame.image.load('resources/cards/qs.png')
    diamondK = pygame.image.load('resources/cards/kd.png')
    clubK = pygame.image.load('resources/cards/kc.png')
    heartK = pygame.image.load('resources/cards/kh.png')
    spadeK = pygame.image.load('resources/cards/ks.png')

    # Set Icon
    pygame.display.set_icon(icon)

    # Global Constants
    black = (0, 0, 0)
    white = (255, 255, 255)
    gray = (192, 192, 192)

    cards = [diamondA, clubA, heartA, spadeA, \
             diamond2, club2, heart2, spade2, \
             diamond3, club3, heart3, spade3, \
             diamond4, club4, heart4, spade4, \
             diamond5, club5, heart5, spade5, \
             diamond6, club6, heart6, spade6, \
             diamond7, club7, heart7, spade7, \
             diamond8, club8, heart8, spade8, \
             diamond9, club9, heart9, spade9, \
             diamond10, club10, heart10, spade10, \
             diamondJ, clubJ, heartJ, spadeJ, \
             diamondQ, clubQ, heartQ, spadeQ, \
             diamondK, clubK, heartK, spadeK]
    cardA = [diamondA, clubA, heartA, spadeA]
    card2 = [diamond2, club2, heart2, spade2]
    card3 = [diamond3, club3, heart3, spade3]
    card4 = [diamond4, club4, heart4, spade4]
    card5 = [diamond5, club5, heart5, spade5]
    card6 = [diamond6, club6, heart6, spade6]
    card7 = [diamond7, club7, heart7, spade7]
    card8 = [diamond8, club8, heart8, spade8]
    card9 = [diamond9, club9, heart9, spade9]
    card10 = [diamond10, club10, heart10, spade10, \
              diamondJ, clubJ, heartJ, spadeJ, \
              diamondQ, clubQ, heartQ, spadeQ, \
              diamondK, clubK, heartK, spadeK]

    def getAmt(card):
        # Returns the amount the card is worth.
        # E.g. Ace is default 11. 10/Jack/Queen/King is 10.
        if card in cardA:
            return 11
        elif card in card2:
            return 2
        elif card in card3:
            return 3
        elif card in card4:
            return 4
        elif card in card5:
            return 5
        elif card in card6:
            return 6
        elif card in card7:
            return 7
        elif card in card8:
            return 8
        elif card in card9:
            return 9
        elif card in card10:
            return 10
        else:
            print('No Card value')
            exit()

    def genCard(cList, xList):
        # Generates an card from cList, removes it from cList, and appends it to xList.
        # Returns if card is Ace and the card itself.'''
        cA = 0
        card = random.choice(cList)
        cList.remove(card)
        xList.append(card)
        if card in cardA:
            cA = 1
        return card, cA

    def initGame(cList, uList):
        # Returns if card is Ace
        userA = 0
        card1, cA = genCard(cList, uList)
        userA += cA
        card3, cA = genCard(cList, uList)
        userA += cA
        return getAmt(card1) + getAmt(card3), userA, getAmt(card2)

    def main():
        # need to see if class is working!
        # Local Variable
        ccards = copy.copy(cards)
        userCard = []

        # Initialize Game
        pygame.init()
        screen = pygame.display.set_mode((640, 480))  # can change this
        pygame.display.set_caption('ClassCardsPygame')
        font = pygame.font.SysFont('arial', 15)

        userSum, userA, deal = initGame(ccards, userCard)
        card, cA = genCard(ccards, userCard)
        userA += cA

        # Fill Background - just to see if working, beginning here
        background = pygame.Surface(screen.get_size())
        background = background.convert()
        background.fill((80, 150, 15))


# choose to use one of vals OR rank ( has png graphics) - uncomment this if not using ranks.
    #def __init__(self, suit=0, vals=0):
     #   self.suit = suit
      #  self.vals = vals

    def __str__(self):
        """
          >>> print(Card(2, 11))
          Queen of Hearts
        """
        return '{0} of {1}'.format(Card.VALS[self.vals],
                                   Card.SUITS[self.suit])

    def diamond(x, y, width, height, color):
        pygame.draw.polygon(Display, color,
                            ((x, y), (x + width / 2, y + height / 2), (x, y + height), (x - width / 2, y + height / 2)))



# Loop until the user clicks the close button.
done = False

# Used to manage how fast the screen updates
clock = pygame.time.Clock()


#class Card:  (This is above - left in so that you could see integration and merging.
    # SUITS = ('Clubs', 'Diamonds', 'Hearts', 'Spades')
    #global RANKS
    #RANKS = ('Ace', '2', '3', '4') - see Ms. Harris code, used your setup (sort of)

def __init__(self, suit=0, rank=0):
    self.suit = suit
    self.rank = rank

    def __str__(self):
        """
          # >>> print(Card(2, 11))
          Queen of Hearts
        """
        return '{0} of {1}'.format(Card.RANKS[self.rank],
                                   Card.SUITS[self.suit])

    def cardrank():
        rank = random.choice(RANKS)
        pygame.draw.rect(screen, WHITE, [200, 150, 200, 300])
        font = pygame.font.SysFont("comicsansms", 48)  # Setting up the font
        if rank == 'Ace': #(use this or call png files at top)
            text = font.render("A", True, (0, 0, 0))
            screen.blit(text, (220, 170))  # where to display it
            text1 = font.render("A", True, (0, 0, 0))
            screen.blit(text1, (350, 370))
            pygame.display.flip()
        if rank == '2': # use this or call png files at top)
            text = font.render("2", True, (0, 0, 0))
            screen.blit(text, (220, 170))  # where to display it
            text1 = font.render("2", True, (0, 0, 0))
            screen.blit(text1, (350, 370))
            pygame.display.flip()
        if rank == '3': # use this or call png files at top)
            text = font.render("3", True, (0, 0, 0))
            screen.blit(text, (220, 170))  # where to display it
            text1 = font.render("3", True, (0, 0, 0))
            screen.blit(text1, (350, 370))
            pygame.display.flip()
        if rank == '4': # use this or call png files at top)
            text = font.render("4", True, (0, 0, 0))
            screen.blit(text, (220, 170))  # where to display it
            text1 = font.render("4", True, (0, 0, 0))
            screen.blit(text1, (350, 370))
            pygame.display.flip()

    cardrank()
    while not done:
        # Event loop
        for event in pygame.event.get():  # User did something
            if event.type == pygame.QUIT:  # If user clicked close
                done = True  # Flag that we are done so we exit this loop


if __name__ == '__main__':
    import doctest

    doctest.testmod()

# error here what is pg ?  (left it theree)
    def heart(x, y, colour):
        pg.draw.ellipse(screen, colour, (x - 10, y, 32, 32))
        pg.draw.ellipse(screen, colour, (x + 10, y, 32, 32))
        pg.draw.polygon(screen, colour, ((x - 9, y + 20), (x + 40, y + 20), (x + 16, y + 55)))
        pg.display.flip()
heart(100, 100, (random.randint(0, 255, ), random.randint(0, 255), random.randint(0, 255)))
